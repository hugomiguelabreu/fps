%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.1
-module(server_wrapper).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("server_wrapper.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'FrontEndTorrent'() :: #'FrontEndTorrent'{}.
-type 'TrackerTorrent'() :: #'TrackerTorrent'{}.
-type 'ServerMessage'() :: #'ServerMessage'{}.
-export_type(['FrontEndTorrent'/0, 'TrackerTorrent'/0, 'ServerMessage'/0]).

-spec encode_msg(#'FrontEndTorrent'{} | #'TrackerTorrent'{} | #'ServerMessage'{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#'FrontEndTorrent'{} | #'TrackerTorrent'{} | #'ServerMessage'{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'FrontEndTorrent'{} ->
	  e_msg_FrontEndTorrent(Msg, TrUserData);
      #'TrackerTorrent'{} ->
	  e_msg_TrackerTorrent(Msg, TrUserData);
      #'ServerMessage'{} ->
	  e_msg_ServerMessage(Msg, TrUserData)
    end.



e_msg_FrontEndTorrent(Msg, TrUserData) ->
    e_msg_FrontEndTorrent(Msg, <<>>, TrUserData).


e_msg_FrontEndTorrent(#'FrontEndTorrent'{id = F1,
					 user = F2, group = F3, content = F4},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false -> e_type_string(TrF3, <<B2/binary, 26>>)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     case iolist_size(TrF4) of
	       0 -> B3;
	       _ -> e_type_bytes(TrF4, <<B3/binary, 34>>)
	     end
	   end
    end.

e_msg_TrackerTorrent(Msg, TrUserData) ->
    e_msg_TrackerTorrent(Msg, <<>>, TrUserData).


e_msg_TrackerTorrent(#'TrackerTorrent'{content = F1},
		     Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_ServerMessage(Msg, TrUserData) ->
    e_msg_ServerMessage(Msg, <<>>, TrUserData).


e_msg_ServerMessage(#'ServerMessage'{msg = F1}, Bin,
		    TrUserData) ->
    case F1 of
      undefined -> Bin;
      {frontEndTorrent, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_ServerMessage_frontEndTorrent(TrOF1,
						   <<Bin/binary, 10>>,
						   TrUserData)
	  end;
      {trackerTorrent, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_ServerMessage_trackerTorrent(TrOF1,
						  <<Bin/binary, 18>>,
						  TrUserData)
	  end
    end.

e_mfield_ServerMessage_frontEndTorrent(Msg, Bin,
				       TrUserData) ->
    SubBin = e_msg_FrontEndTorrent(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ServerMessage_trackerTorrent(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_TrackerTorrent(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'FrontEndTorrent' ->
	  try d_msg_FrontEndTorrent(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'FrontEndTorrent', {Class, Reason, StackTrace}}}})
	  end;
      'TrackerTorrent' ->
	  try d_msg_TrackerTorrent(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'TrackerTorrent', {Class, Reason, StackTrace}}}})
	  end;
      'ServerMessage' ->
	  try d_msg_ServerMessage(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'ServerMessage', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_FrontEndTorrent(Bin, TrUserData) ->
    dfp_read_field_def_FrontEndTorrent(Bin, 0, 0,
				       id(<<>>, TrUserData),
				       id(<<>>, TrUserData),
				       id(<<>>, TrUserData),
				       id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_FrontEndTorrent(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_FrontEndTorrent_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_FrontEndTorrent(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_FrontEndTorrent_user(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_FrontEndTorrent(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_FrontEndTorrent_group(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_FrontEndTorrent(<<34, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    d_field_FrontEndTorrent_content(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_FrontEndTorrent(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, _) ->
    #'FrontEndTorrent'{id = F@_1, user = F@_2, group = F@_3,
		       content = F@_4};
dfp_read_field_def_FrontEndTorrent(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_FrontEndTorrent(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_FrontEndTorrent(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FrontEndTorrent(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
dg_read_field_def_FrontEndTorrent(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FrontEndTorrent_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      18 ->
	  d_field_FrontEndTorrent_user(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      26 ->
	  d_field_FrontEndTorrent_group(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      34 ->
	  d_field_FrontEndTorrent_content(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FrontEndTorrent(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_FrontEndTorrent(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData);
	    2 ->
		skip_length_delimited_FrontEndTorrent(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4,
						      TrUserData);
	    3 ->
		skip_group_FrontEndTorrent(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_FrontEndTorrent(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData)
	  end
    end;
dg_read_field_def_FrontEndTorrent(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, _) ->
    #'FrontEndTorrent'{id = F@_1, user = F@_2, group = F@_3,
		       content = F@_4}.

d_field_FrontEndTorrent_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FrontEndTorrent_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_FrontEndTorrent_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_FrontEndTorrent(RestF, 0, 0,
				       NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_FrontEndTorrent_user(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FrontEndTorrent_user(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_FrontEndTorrent_user(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_FrontEndTorrent(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, F@_4, TrUserData).

d_field_FrontEndTorrent_group(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FrontEndTorrent_group(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_FrontEndTorrent_group(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_FrontEndTorrent(RestF, 0, 0, F@_1,
				       F@_2, NewFValue, F@_4, TrUserData).

d_field_FrontEndTorrent_content(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FrontEndTorrent_content(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_FrontEndTorrent_content(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_FrontEndTorrent(RestF, 0, 0, F@_1,
				       F@_2, F@_3, NewFValue, TrUserData).

skip_varint_FrontEndTorrent(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_FrontEndTorrent(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
skip_varint_FrontEndTorrent(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FrontEndTorrent(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_FrontEndTorrent(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    skip_length_delimited_FrontEndTorrent(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
skip_length_delimited_FrontEndTorrent(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FrontEndTorrent(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_group_FrontEndTorrent(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FrontEndTorrent(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_32_FrontEndTorrent(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FrontEndTorrent(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

skip_64_FrontEndTorrent(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FrontEndTorrent(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

d_msg_TrackerTorrent(Bin, TrUserData) ->
    dfp_read_field_def_TrackerTorrent(Bin, 0, 0,
				      id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_TrackerTorrent(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_TrackerTorrent_content(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_TrackerTorrent(<<>>, 0, 0, F@_1,
				  _) ->
    #'TrackerTorrent'{content = F@_1};
dfp_read_field_def_TrackerTorrent(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_TrackerTorrent(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_TrackerTorrent(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TrackerTorrent(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_TrackerTorrent(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TrackerTorrent_content(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TrackerTorrent(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_TrackerTorrent(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_TrackerTorrent(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_TrackerTorrent(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_TrackerTorrent(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_TrackerTorrent(<<>>, 0, 0, F@_1, _) ->
    #'TrackerTorrent'{content = F@_1}.

d_field_TrackerTorrent_content(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_TrackerTorrent_content(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_TrackerTorrent_content(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_TrackerTorrent(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_TrackerTorrent(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_TrackerTorrent(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_TrackerTorrent(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_TrackerTorrent(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_TrackerTorrent(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_TrackerTorrent(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_TrackerTorrent(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TrackerTorrent(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_TrackerTorrent(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TrackerTorrent(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_TrackerTorrent(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_TrackerTorrent(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_TrackerTorrent(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_TrackerTorrent(Rest, Z1, Z2, F@_1,
				      TrUserData).

d_msg_ServerMessage(Bin, TrUserData) ->
    dfp_read_field_def_ServerMessage(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ServerMessage(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerMessage_frontEndTorrent(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_ServerMessage(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_ServerMessage_trackerTorrent(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_ServerMessage(<<>>, 0, 0, F@_1, _) ->
    #'ServerMessage'{msg = F@_1};
dfp_read_field_def_ServerMessage(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_ServerMessage(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_ServerMessage(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ServerMessage(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ServerMessage(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ServerMessage_frontEndTorrent(Rest, 0, 0, F@_1,
						TrUserData);
      18 ->
	  d_field_ServerMessage_trackerTorrent(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ServerMessage(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_ServerMessage(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ServerMessage(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_ServerMessage(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_ServerMessage(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ServerMessage(<<>>, 0, 0, F@_1, _) ->
    #'ServerMessage'{msg = F@_1}.

d_field_ServerMessage_frontEndTorrent(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerMessage_frontEndTorrent(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_ServerMessage_frontEndTorrent(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_FrontEndTorrent(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerMessage(RestF, 0, 0,
				     case Prev of
				       undefined ->
					   {frontEndTorrent, NewFValue};
				       {frontEndTorrent, MVPrev} ->
					   {frontEndTorrent,
					    merge_msg_FrontEndTorrent(MVPrev,
								      NewFValue,
								      TrUserData)};
				       _ -> {frontEndTorrent, NewFValue}
				     end,
				     TrUserData).

d_field_ServerMessage_trackerTorrent(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ServerMessage_trackerTorrent(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_ServerMessage_trackerTorrent(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_TrackerTorrent(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ServerMessage(RestF, 0, 0,
				     case Prev of
				       undefined -> {trackerTorrent, NewFValue};
				       {trackerTorrent, MVPrev} ->
					   {trackerTorrent,
					    merge_msg_TrackerTorrent(MVPrev,
								     NewFValue,
								     TrUserData)};
				       _ -> {trackerTorrent, NewFValue}
				     end,
				     TrUserData).

skip_varint_ServerMessage(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_ServerMessage(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_ServerMessage(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ServerMessage(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_ServerMessage(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ServerMessage(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ServerMessage(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ServerMessage(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_ServerMessage(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ServerMessage(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_ServerMessage(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_ServerMessage(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_ServerMessage(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_ServerMessage(Rest, Z1, Z2, F@_1,
				     TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'FrontEndTorrent'{} ->
	  merge_msg_FrontEndTorrent(Prev, New, TrUserData);
      #'TrackerTorrent'{} ->
	  merge_msg_TrackerTorrent(Prev, New, TrUserData);
      #'ServerMessage'{} ->
	  merge_msg_ServerMessage(Prev, New, TrUserData)
    end.

merge_msg_FrontEndTorrent(#'FrontEndTorrent'{id = PFid,
					     user = PFuser, group = PFgroup,
					     content = PFcontent},
			  #'FrontEndTorrent'{id = NFid, user = NFuser,
					     group = NFgroup,
					     content = NFcontent},
			  _) ->
    #'FrontEndTorrent'{id =
			   if NFid =:= undefined -> PFid;
			      true -> NFid
			   end,
		       user =
			   if NFuser =:= undefined -> PFuser;
			      true -> NFuser
			   end,
		       group =
			   if NFgroup =:= undefined -> PFgroup;
			      true -> NFgroup
			   end,
		       content =
			   if NFcontent =:= undefined -> PFcontent;
			      true -> NFcontent
			   end}.

merge_msg_TrackerTorrent(#'TrackerTorrent'{content =
					       PFcontent},
			 #'TrackerTorrent'{content = NFcontent}, _) ->
    #'TrackerTorrent'{content =
			  if NFcontent =:= undefined -> PFcontent;
			     true -> NFcontent
			  end}.

merge_msg_ServerMessage(#'ServerMessage'{msg = PFmsg},
			#'ServerMessage'{msg = NFmsg}, TrUserData) ->
    #'ServerMessage'{msg =
			 case {PFmsg, NFmsg} of
			   {{frontEndTorrent, OPFmsg},
			    {frontEndTorrent, ONFmsg}} ->
			       {frontEndTorrent,
				merge_msg_FrontEndTorrent(OPFmsg, ONFmsg,
							  TrUserData)};
			   {{trackerTorrent, OPFmsg},
			    {trackerTorrent, ONFmsg}} ->
			       {trackerTorrent,
				merge_msg_TrackerTorrent(OPFmsg, ONFmsg,
							 TrUserData)};
			   {_, undefined} -> PFmsg;
			   _ -> NFmsg
			 end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'FrontEndTorrent'{} ->
	  v_msg_FrontEndTorrent(Msg, ['FrontEndTorrent'],
				TrUserData);
      #'TrackerTorrent'{} ->
	  v_msg_TrackerTorrent(Msg, ['TrackerTorrent'],
			       TrUserData);
      #'ServerMessage'{} ->
	  v_msg_ServerMessage(Msg, ['ServerMessage'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_FrontEndTorrent/3}).
v_msg_FrontEndTorrent(#'FrontEndTorrent'{id = F1,
					 user = F2, group = F3, content = F4},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [user | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [group | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bytes(F4, [content | Path])
    end,
    ok;
v_msg_FrontEndTorrent(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FrontEndTorrent'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_TrackerTorrent/3}).
v_msg_TrackerTorrent(#'TrackerTorrent'{content = F1},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [content | Path])
    end,
    ok;
v_msg_TrackerTorrent(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TrackerTorrent'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ServerMessage/3}).
v_msg_ServerMessage(#'ServerMessage'{msg = F1}, Path,
		    TrUserData) ->
    case F1 of
      undefined -> ok;
      {frontEndTorrent, OF1} ->
	  v_msg_FrontEndTorrent(OF1,
				[frontEndTorrent, msg | Path], TrUserData);
      {trackerTorrent, OF1} ->
	  v_msg_TrackerTorrent(OF1, [trackerTorrent, msg | Path],
			       TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [msg | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{msg, 'FrontEndTorrent'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = user, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = group, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = content, fnum = 4, rnum = 5, type = bytes,
	      occurrence = optional, opts = []}]},
     {{msg, 'TrackerTorrent'},
      [#field{name = content, fnum = 1, rnum = 2,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, 'ServerMessage'},
      [#gpb_oneof{name = msg, rnum = 2,
		  fields =
		      [#field{name = frontEndTorrent, fnum = 1, rnum = 2,
			      type = {msg, 'FrontEndTorrent'},
			      occurrence = optional, opts = []},
		       #field{name = trackerTorrent, fnum = 2, rnum = 2,
			      type = {msg, 'TrackerTorrent'},
			      occurrence = optional, opts = []}]}]}].


get_msg_names() ->
    ['FrontEndTorrent', 'TrackerTorrent', 'ServerMessage'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['FrontEndTorrent', 'TrackerTorrent', 'ServerMessage'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('FrontEndTorrent') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = user, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = group, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = content, fnum = 4, rnum = 5, type = bytes,
	    occurrence = optional, opts = []}];
find_msg_def('TrackerTorrent') ->
    [#field{name = content, fnum = 1, rnum = 2,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def('ServerMessage') ->
    [#gpb_oneof{name = msg, rnum = 2,
		fields =
		    [#field{name = frontEndTorrent, fnum = 1, rnum = 2,
			    type = {msg, 'FrontEndTorrent'},
			    occurrence = optional, opts = []},
		     #field{name = trackerTorrent, fnum = 2, rnum = 2,
			    type = {msg, 'TrackerTorrent'},
			    occurrence = optional, opts = []}]}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> server_network.



gpb_version_as_string() ->
    "4.1.1".

gpb_version_as_list() ->
    [4,1,1].
