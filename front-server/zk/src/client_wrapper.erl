%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.1.1
-module(client_wrapper).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("client_wrapper.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'GroupUsers'() :: #'GroupUsers'{}.
-type 'JoinGroup'() :: #'JoinGroup'{}.
-type 'Register'() :: #'Register'{}.
-type 'TorrentWrapper'() :: #'TorrentWrapper'{}.
-type 'CreateGroup'() :: #'CreateGroup'{}.
-type 'Response'() :: #'Response'{}.
-type 'Login'() :: #'Login'{}.
-type 'ClientMessage'() :: #'ClientMessage'{}.
-type 'OnlineUsers'() :: #'OnlineUsers'{}.
-export_type(['GroupUsers'/0, 'JoinGroup'/0, 'Register'/0, 'TorrentWrapper'/0, 'CreateGroup'/0, 'Response'/0, 'Login'/0, 'ClientMessage'/0, 'OnlineUsers'/0]).

-spec encode_msg(#'GroupUsers'{} | #'JoinGroup'{} | #'Register'{} | #'TorrentWrapper'{} | #'CreateGroup'{} | #'Response'{} | #'Login'{} | #'ClientMessage'{} | #'OnlineUsers'{}) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(#'GroupUsers'{} | #'JoinGroup'{} | #'Register'{} | #'TorrentWrapper'{} | #'CreateGroup'{} | #'Response'{} | #'Login'{} | #'ClientMessage'{} | #'OnlineUsers'{}, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'GroupUsers'{} -> e_msg_GroupUsers(Msg, TrUserData);
      #'JoinGroup'{} -> e_msg_JoinGroup(Msg, TrUserData);
      #'Register'{} -> e_msg_Register(Msg, TrUserData);
      #'TorrentWrapper'{} ->
	  e_msg_TorrentWrapper(Msg, TrUserData);
      #'CreateGroup'{} -> e_msg_CreateGroup(Msg, TrUserData);
      #'Response'{} -> e_msg_Response(Msg, TrUserData);
      #'Login'{} -> e_msg_Login(Msg, TrUserData);
      #'ClientMessage'{} ->
	  e_msg_ClientMessage(Msg, TrUserData);
      #'OnlineUsers'{} -> e_msg_OnlineUsers(Msg, TrUserData)
    end.



e_msg_GroupUsers(Msg, TrUserData) ->
    e_msg_GroupUsers(Msg, <<>>, TrUserData).


e_msg_GroupUsers(#'GroupUsers'{groupUsers = F1}, Bin,
		 TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_JoinGroup(Msg, TrUserData) ->
    e_msg_JoinGroup(Msg, <<>>, TrUserData).


e_msg_JoinGroup(#'JoinGroup'{group = F1}, Bin,
		TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_Register(Msg, TrUserData) ->
    e_msg_Register(Msg, <<>>, TrUserData).


e_msg_Register(#'Register'{username = F1, password = F2,
			   name = F3},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_TorrentWrapper(Msg, TrUserData) ->
    e_msg_TorrentWrapper(Msg, <<>>, TrUserData).


e_msg_TorrentWrapper(#'TorrentWrapper'{group = F1,
				       content = F2, id = F3},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_CreateGroup(Msg, TrUserData) ->
    e_msg_CreateGroup(Msg, <<>>, TrUserData).


e_msg_CreateGroup(#'CreateGroup'{group = F1}, Bin,
		  TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_msg_Response(Msg, TrUserData) ->
    e_msg_Response(Msg, <<>>, TrUserData).


e_msg_Response(#'Response'{rep = F1}, Bin,
	       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= false -> Bin;
		true -> e_type_bool(TrF1, <<Bin/binary, 8>>)
	     end
	   end
    end.

e_msg_Login(Msg, TrUserData) ->
    e_msg_Login(Msg, <<>>, TrUserData).


e_msg_Login(#'Login'{username = F1, password = F2}, Bin,
	    TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false -> e_type_string(TrF2, <<B1/binary, 18>>)
	     end
	   end
    end.

e_msg_ClientMessage(Msg, TrUserData) ->
    e_msg_ClientMessage(Msg, <<>>, TrUserData).


e_msg_ClientMessage(#'ClientMessage'{msg = F1}, Bin,
		    TrUserData) ->
    case F1 of
      undefined -> Bin;
      {login, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_ClientMessage_login(TrOF1, <<Bin/binary, 10>>,
					 TrUserData)
	  end;
      {register, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_ClientMessage_register(TrOF1,
					    <<Bin/binary, 18>>, TrUserData)
	  end;
      {response, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_ClientMessage_response(TrOF1,
					    <<Bin/binary, 26>>, TrUserData)
	  end;
      {createGroup, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_ClientMessage_createGroup(TrOF1,
					       <<Bin/binary, 34>>, TrUserData)
	  end;
      {joinGroup, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_ClientMessage_joinGroup(TrOF1,
					     <<Bin/binary, 42>>, TrUserData)
	  end;
      {torrentWrapper, OF1} ->
	  begin
	    TrOF1 = id(OF1, TrUserData),
	    e_mfield_ClientMessage_torrentWrapper(TrOF1,
						  <<Bin/binary, 50>>,
						  TrUserData)
	  end
    end.

e_msg_OnlineUsers(Msg, TrUserData) ->
    e_msg_OnlineUsers(Msg, <<>>, TrUserData).


e_msg_OnlineUsers(#'OnlineUsers'{onlineUsers = F1}, Bin,
		  TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false -> e_type_string(TrF1, <<Bin/binary, 10>>)
	     end
	   end
    end.

e_mfield_ClientMessage_login(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Login(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ClientMessage_register(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Register(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ClientMessage_response(Msg, Bin, TrUserData) ->
    SubBin = e_msg_Response(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ClientMessage_createGroup(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_CreateGroup(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ClientMessage_joinGroup(Msg, Bin,
				 TrUserData) ->
    SubBin = e_msg_JoinGroup(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ClientMessage_torrentWrapper(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_TorrentWrapper(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'GroupUsers' ->
	  try d_msg_GroupUsers(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'GroupUsers', {Class, Reason, StackTrace}}}})
	  end;
      'JoinGroup' ->
	  try d_msg_JoinGroup(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'JoinGroup', {Class, Reason, StackTrace}}}})
	  end;
      'Register' ->
	  try d_msg_Register(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Register', {Class, Reason, StackTrace}}}})
	  end;
      'TorrentWrapper' ->
	  try d_msg_TorrentWrapper(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'TorrentWrapper', {Class, Reason, StackTrace}}}})
	  end;
      'CreateGroup' ->
	  try d_msg_CreateGroup(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'CreateGroup', {Class, Reason, StackTrace}}}})
	  end;
      'Response' ->
	  try d_msg_Response(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Response', {Class, Reason, StackTrace}}}})
	  end;
      'Login' ->
	  try d_msg_Login(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'Login', {Class, Reason, StackTrace}}}})
	  end;
      'ClientMessage' ->
	  try d_msg_ClientMessage(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'ClientMessage', {Class, Reason, StackTrace}}}})
	  end;
      'OnlineUsers' ->
	  try d_msg_OnlineUsers(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'OnlineUsers', {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_GroupUsers(Bin, TrUserData) ->
    dfp_read_field_def_GroupUsers(Bin, 0, 0,
				  id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_GroupUsers(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_GroupUsers_groupUsers(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_GroupUsers(<<>>, 0, 0, F@_1, _) ->
    #'GroupUsers'{groupUsers = F@_1};
dfp_read_field_def_GroupUsers(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_GroupUsers(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_GroupUsers(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GroupUsers(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_GroupUsers(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GroupUsers_groupUsers(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GroupUsers(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_GroupUsers(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_GroupUsers(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_GroupUsers(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_GroupUsers(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_GroupUsers(<<>>, 0, 0, F@_1, _) ->
    #'GroupUsers'{groupUsers = F@_1}.

d_field_GroupUsers_groupUsers(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GroupUsers_groupUsers(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_GroupUsers_groupUsers(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_GroupUsers(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_GroupUsers(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_GroupUsers(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_GroupUsers(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GroupUsers(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_GroupUsers(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GroupUsers(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_GroupUsers(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GroupUsers(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_GroupUsers(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GroupUsers(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_GroupUsers(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_GroupUsers(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_GroupUsers(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_GroupUsers(Rest, Z1, Z2, F@_1,
				  TrUserData).

d_msg_JoinGroup(Bin, TrUserData) ->
    dfp_read_field_def_JoinGroup(Bin, 0, 0,
				 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_JoinGroup(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_JoinGroup_group(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_JoinGroup(<<>>, 0, 0, F@_1, _) ->
    #'JoinGroup'{group = F@_1};
dfp_read_field_def_JoinGroup(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_JoinGroup(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_JoinGroup(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_JoinGroup(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_JoinGroup(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_JoinGroup_group(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_JoinGroup(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_JoinGroup(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_JoinGroup(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_JoinGroup(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_JoinGroup(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_JoinGroup(<<>>, 0, 0, F@_1, _) ->
    #'JoinGroup'{group = F@_1}.

d_field_JoinGroup_group(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_JoinGroup_group(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_JoinGroup_group(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_JoinGroup(RestF, 0, 0, NewFValue,
				 TrUserData).

skip_varint_JoinGroup(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_JoinGroup(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_JoinGroup(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_JoinGroup(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_JoinGroup(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_JoinGroup(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_JoinGroup(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_JoinGroup(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_JoinGroup(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_JoinGroup(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_JoinGroup(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_JoinGroup(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_JoinGroup(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_JoinGroup(Rest, Z1, Z2, F@_1,
				 TrUserData).

d_msg_Register(Bin, TrUserData) ->
    dfp_read_field_def_Register(Bin, 0, 0,
				id(<<>>, TrUserData), id(<<>>, TrUserData),
				id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_Register(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Register_username(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_Register(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Register_password(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_Register(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_Register_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_Register(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #'Register'{username = F@_1, password = F@_2,
		name = F@_3};
dfp_read_field_def_Register(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_Register(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_Register(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Register(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Register(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Register_username(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      18 ->
	  d_field_Register_password(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      26 ->
	  d_field_Register_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Register(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_Register(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_Register(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_Register(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_Register(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_Register(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #'Register'{username = F@_1, password = F@_2,
		name = F@_3}.

d_field_Register_username(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Register_username(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_Register_username(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Register(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_Register_password(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Register_password(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_Register_password(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Register(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_Register_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_Register_name(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_Register_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Register(RestF, 0, 0, F@_1, F@_2,
				NewFValue, TrUserData).

skip_varint_Register(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_Register(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_Register(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Register(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_Register(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_Register(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Register(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Register(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_Register(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Register(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_Register(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Register(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_Register(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_Register(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

d_msg_TorrentWrapper(Bin, TrUserData) ->
    dfp_read_field_def_TorrentWrapper(Bin, 0, 0,
				      id(<<>>, TrUserData),
				      id(<<>>, TrUserData),
				      id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_TorrentWrapper(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TorrentWrapper_group(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_TorrentWrapper(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TorrentWrapper_content(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_TorrentWrapper(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_TorrentWrapper_id(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_TorrentWrapper(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, _) ->
    #'TorrentWrapper'{group = F@_1, content = F@_2,
		      id = F@_3};
dfp_read_field_def_TorrentWrapper(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_TorrentWrapper(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

dg_read_field_def_TorrentWrapper(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TorrentWrapper(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
dg_read_field_def_TorrentWrapper(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TorrentWrapper_group(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      18 ->
	  d_field_TorrentWrapper_content(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      26 ->
	  d_field_TorrentWrapper_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TorrentWrapper(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    1 ->
		skip_64_TorrentWrapper(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    2 ->
		skip_length_delimited_TorrentWrapper(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_TorrentWrapper(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_TorrentWrapper(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData)
	  end
    end;
dg_read_field_def_TorrentWrapper(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    #'TorrentWrapper'{group = F@_1, content = F@_2,
		      id = F@_3}.

d_field_TorrentWrapper_group(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TorrentWrapper_group(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_TorrentWrapper_group(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_TorrentWrapper(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, TrUserData).

d_field_TorrentWrapper_content(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TorrentWrapper_content(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_TorrentWrapper_content(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_TorrentWrapper(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, TrUserData).

d_field_TorrentWrapper_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_TorrentWrapper_id(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_TorrentWrapper_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_TorrentWrapper(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, TrUserData).

skip_varint_TorrentWrapper(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_TorrentWrapper(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
skip_varint_TorrentWrapper(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TorrentWrapper(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_length_delimited_TorrentWrapper(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_TorrentWrapper(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
skip_length_delimited_TorrentWrapper(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TorrentWrapper(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, TrUserData).

skip_group_TorrentWrapper(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TorrentWrapper(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_32_TorrentWrapper(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TorrentWrapper(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_64_TorrentWrapper(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_TorrentWrapper(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

d_msg_CreateGroup(Bin, TrUserData) ->
    dfp_read_field_def_CreateGroup(Bin, 0, 0,
				   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_CreateGroup(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_CreateGroup_group(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_CreateGroup(<<>>, 0, 0, F@_1, _) ->
    #'CreateGroup'{group = F@_1};
dfp_read_field_def_CreateGroup(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_CreateGroup(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_CreateGroup(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CreateGroup(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_CreateGroup(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CreateGroup_group(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CreateGroup(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_CreateGroup(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_CreateGroup(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_CreateGroup(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_CreateGroup(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_CreateGroup(<<>>, 0, 0, F@_1, _) ->
    #'CreateGroup'{group = F@_1}.

d_field_CreateGroup_group(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_CreateGroup_group(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_CreateGroup_group(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_CreateGroup(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_CreateGroup(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_CreateGroup(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_CreateGroup(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_CreateGroup(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_CreateGroup(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_CreateGroup(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_CreateGroup(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CreateGroup(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_CreateGroup(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CreateGroup(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_CreateGroup(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_CreateGroup(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_CreateGroup(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_CreateGroup(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_Response(Bin, TrUserData) ->
    dfp_read_field_def_Response(Bin, 0, 0,
				id(false, TrUserData), TrUserData).

dfp_read_field_def_Response(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_rep(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, F@_1, _) ->
    #'Response'{rep = F@_1};
dfp_read_field_def_Response(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_Response(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_Response_rep(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Response(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Response(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Response(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_Response(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_Response(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Response(<<>>, 0, 0, F@_1, _) ->
    #'Response'{rep = F@_1}.

d_field_Response_rep(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_rep(Rest, N + 7, X bsl N + Acc, F@_1,
			 TrUserData);
d_field_Response_rep(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    dfp_read_field_def_Response(RestF, 0, 0, NewFValue,
				TrUserData).

skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_Response(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_Response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Response(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_Response(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Response(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

d_msg_Login(Bin, TrUserData) ->
    dfp_read_field_def_Login(Bin, 0, 0,
			     id(<<>>, TrUserData), id(<<>>, TrUserData),
			     TrUserData).

dfp_read_field_def_Login(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_Login_username(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_Login(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_Login_password(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_Login(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Login'{username = F@_1, password = F@_2};
dfp_read_field_def_Login(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData) ->
    dg_read_field_def_Login(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData).

dg_read_field_def_Login(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Login(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
dg_read_field_def_Login(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Login_username(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_Login_password(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Login(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Login(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Login(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    3 ->
		skip_group_Login(Rest, Key bsr 3, 0, F@_1, F@_2,
				 TrUserData);
	    5 -> skip_32_Login(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Login(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Login'{username = F@_1, password = F@_2}.

d_field_Login_username(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Login_username(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_Login_username(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Login(RestF, 0, 0, NewFValue, F@_2,
			     TrUserData).

d_field_Login_password(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Login_password(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_Login_password(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_Login(RestF, 0, 0, F@_1, NewFValue,
			     TrUserData).

skip_varint_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    skip_varint_Login(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_length_delimited_Login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Login(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
skip_length_delimited_Login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Login(Rest2, 0, 0, F@_1, F@_2,
			     TrUserData).

skip_group_Login(Bin, FNum, Z2, F@_1, F@_2,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Login(Rest, 0, Z2, F@_1, F@_2,
			     TrUserData).

skip_32_Login(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_64_Login(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_Login(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

d_msg_ClientMessage(Bin, TrUserData) ->
    dfp_read_field_def_ClientMessage(Bin, 0, 0,
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_ClientMessage(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_ClientMessage_login(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_ClientMessage(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_ClientMessage_register(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_ClientMessage(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_ClientMessage_response(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_ClientMessage(<<34, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_ClientMessage_createGroup(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_ClientMessage(<<42, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_ClientMessage_joinGroup(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_ClientMessage(<<50, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_ClientMessage_torrentWrapper(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_ClientMessage(<<>>, 0, 0, F@_1, _) ->
    #'ClientMessage'{msg = F@_1};
dfp_read_field_def_ClientMessage(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_ClientMessage(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_ClientMessage(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ClientMessage(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_ClientMessage(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ClientMessage_login(Rest, 0, 0, F@_1,
				      TrUserData);
      18 ->
	  d_field_ClientMessage_register(Rest, 0, 0, F@_1,
					 TrUserData);
      26 ->
	  d_field_ClientMessage_response(Rest, 0, 0, F@_1,
					 TrUserData);
      34 ->
	  d_field_ClientMessage_createGroup(Rest, 0, 0, F@_1,
					    TrUserData);
      42 ->
	  d_field_ClientMessage_joinGroup(Rest, 0, 0, F@_1,
					  TrUserData);
      50 ->
	  d_field_ClientMessage_torrentWrapper(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ClientMessage(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_ClientMessage(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_ClientMessage(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_ClientMessage(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_ClientMessage(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_ClientMessage(<<>>, 0, 0, F@_1, _) ->
    #'ClientMessage'{msg = F@_1}.

d_field_ClientMessage_login(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ClientMessage_login(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_ClientMessage_login(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Login(Bs, TrUserData), TrUserData), Rest2}
			 end,
    dfp_read_field_def_ClientMessage(RestF, 0, 0,
				     case Prev of
				       undefined -> {login, NewFValue};
				       {login, MVPrev} ->
					   {login,
					    merge_msg_Login(MVPrev, NewFValue,
							    TrUserData)};
				       _ -> {login, NewFValue}
				     end,
				     TrUserData).

d_field_ClientMessage_register(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ClientMessage_register(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_ClientMessage_register(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Register(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ClientMessage(RestF, 0, 0,
				     case Prev of
				       undefined -> {register, NewFValue};
				       {register, MVPrev} ->
					   {register,
					    merge_msg_Register(MVPrev,
							       NewFValue,
							       TrUserData)};
				       _ -> {register, NewFValue}
				     end,
				     TrUserData).

d_field_ClientMessage_response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ClientMessage_response(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_ClientMessage_response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_Response(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ClientMessage(RestF, 0, 0,
				     case Prev of
				       undefined -> {response, NewFValue};
				       {response, MVPrev} ->
					   {response,
					    merge_msg_Response(MVPrev,
							       NewFValue,
							       TrUserData)};
				       _ -> {response, NewFValue}
				     end,
				     TrUserData).

d_field_ClientMessage_createGroup(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ClientMessage_createGroup(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_ClientMessage_createGroup(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_CreateGroup(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ClientMessage(RestF, 0, 0,
				     case Prev of
				       undefined -> {createGroup, NewFValue};
				       {createGroup, MVPrev} ->
					   {createGroup,
					    merge_msg_CreateGroup(MVPrev,
								  NewFValue,
								  TrUserData)};
				       _ -> {createGroup, NewFValue}
				     end,
				     TrUserData).

d_field_ClientMessage_joinGroup(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ClientMessage_joinGroup(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_ClientMessage_joinGroup(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_JoinGroup(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ClientMessage(RestF, 0, 0,
				     case Prev of
				       undefined -> {joinGroup, NewFValue};
				       {joinGroup, MVPrev} ->
					   {joinGroup,
					    merge_msg_JoinGroup(MVPrev,
								NewFValue,
								TrUserData)};
				       _ -> {joinGroup, NewFValue}
				     end,
				     TrUserData).

d_field_ClientMessage_torrentWrapper(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ClientMessage_torrentWrapper(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_ClientMessage_torrentWrapper(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_TorrentWrapper(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ClientMessage(RestF, 0, 0,
				     case Prev of
				       undefined -> {torrentWrapper, NewFValue};
				       {torrentWrapper, MVPrev} ->
					   {torrentWrapper,
					    merge_msg_TorrentWrapper(MVPrev,
								     NewFValue,
								     TrUserData)};
				       _ -> {torrentWrapper, NewFValue}
				     end,
				     TrUserData).

skip_varint_ClientMessage(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_ClientMessage(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_ClientMessage(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ClientMessage(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_ClientMessage(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ClientMessage(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_ClientMessage(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ClientMessage(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_ClientMessage(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ClientMessage(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_ClientMessage(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_ClientMessage(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_ClientMessage(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_ClientMessage(Rest, Z1, Z2, F@_1,
				     TrUserData).

d_msg_OnlineUsers(Bin, TrUserData) ->
    dfp_read_field_def_OnlineUsers(Bin, 0, 0,
				   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_OnlineUsers(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_OnlineUsers_onlineUsers(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_OnlineUsers(<<>>, 0, 0, F@_1, _) ->
    #'OnlineUsers'{onlineUsers = F@_1};
dfp_read_field_def_OnlineUsers(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_OnlineUsers(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_OnlineUsers(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_OnlineUsers(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_OnlineUsers(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_OnlineUsers_onlineUsers(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_OnlineUsers(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_OnlineUsers(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_OnlineUsers(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_OnlineUsers(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_OnlineUsers(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_OnlineUsers(<<>>, 0, 0, F@_1, _) ->
    #'OnlineUsers'{onlineUsers = F@_1}.

d_field_OnlineUsers_onlineUsers(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_OnlineUsers_onlineUsers(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_OnlineUsers_onlineUsers(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_OnlineUsers(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_OnlineUsers(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_OnlineUsers(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_OnlineUsers(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_OnlineUsers(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_OnlineUsers(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_OnlineUsers(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_OnlineUsers(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OnlineUsers(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_OnlineUsers(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_OnlineUsers(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_OnlineUsers(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_OnlineUsers(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_OnlineUsers(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_OnlineUsers(Rest, Z1, Z2, F@_1,
				   TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'GroupUsers'{} ->
	  merge_msg_GroupUsers(Prev, New, TrUserData);
      #'JoinGroup'{} ->
	  merge_msg_JoinGroup(Prev, New, TrUserData);
      #'Register'{} ->
	  merge_msg_Register(Prev, New, TrUserData);
      #'TorrentWrapper'{} ->
	  merge_msg_TorrentWrapper(Prev, New, TrUserData);
      #'CreateGroup'{} ->
	  merge_msg_CreateGroup(Prev, New, TrUserData);
      #'Response'{} ->
	  merge_msg_Response(Prev, New, TrUserData);
      #'Login'{} -> merge_msg_Login(Prev, New, TrUserData);
      #'ClientMessage'{} ->
	  merge_msg_ClientMessage(Prev, New, TrUserData);
      #'OnlineUsers'{} ->
	  merge_msg_OnlineUsers(Prev, New, TrUserData)
    end.

merge_msg_GroupUsers(#'GroupUsers'{groupUsers =
				       PFgroupUsers},
		     #'GroupUsers'{groupUsers = NFgroupUsers}, _) ->
    #'GroupUsers'{groupUsers =
		      if NFgroupUsers =:= undefined -> PFgroupUsers;
			 true -> NFgroupUsers
		      end}.

merge_msg_JoinGroup(#'JoinGroup'{group = PFgroup},
		    #'JoinGroup'{group = NFgroup}, _) ->
    #'JoinGroup'{group =
		     if NFgroup =:= undefined -> PFgroup;
			true -> NFgroup
		     end}.

merge_msg_Register(#'Register'{username = PFusername,
			       password = PFpassword, name = PFname},
		   #'Register'{username = NFusername,
			       password = NFpassword, name = NFname},
		   _) ->
    #'Register'{username =
		    if NFusername =:= undefined -> PFusername;
		       true -> NFusername
		    end,
		password =
		    if NFpassword =:= undefined -> PFpassword;
		       true -> NFpassword
		    end,
		name =
		    if NFname =:= undefined -> PFname;
		       true -> NFname
		    end}.

merge_msg_TorrentWrapper(#'TorrentWrapper'{group =
					       PFgroup,
					   content = PFcontent, id = PFid},
			 #'TorrentWrapper'{group = NFgroup, content = NFcontent,
					   id = NFid},
			 _) ->
    #'TorrentWrapper'{group =
			  if NFgroup =:= undefined -> PFgroup;
			     true -> NFgroup
			  end,
		      content =
			  if NFcontent =:= undefined -> PFcontent;
			     true -> NFcontent
			  end,
		      id =
			  if NFid =:= undefined -> PFid;
			     true -> NFid
			  end}.

merge_msg_CreateGroup(#'CreateGroup'{group = PFgroup},
		      #'CreateGroup'{group = NFgroup}, _) ->
    #'CreateGroup'{group =
		       if NFgroup =:= undefined -> PFgroup;
			  true -> NFgroup
		       end}.

merge_msg_Response(#'Response'{rep = PFrep},
		   #'Response'{rep = NFrep}, _) ->
    #'Response'{rep =
		    if NFrep =:= undefined -> PFrep;
		       true -> NFrep
		    end}.

merge_msg_Login(#'Login'{username = PFusername,
			 password = PFpassword},
		#'Login'{username = NFusername, password = NFpassword},
		_) ->
    #'Login'{username =
		 if NFusername =:= undefined -> PFusername;
		    true -> NFusername
		 end,
	     password =
		 if NFpassword =:= undefined -> PFpassword;
		    true -> NFpassword
		 end}.

merge_msg_ClientMessage(#'ClientMessage'{msg = PFmsg},
			#'ClientMessage'{msg = NFmsg}, TrUserData) ->
    #'ClientMessage'{msg =
			 case {PFmsg, NFmsg} of
			   {{login, OPFmsg}, {login, ONFmsg}} ->
			       {login,
				merge_msg_Login(OPFmsg, ONFmsg, TrUserData)};
			   {{register, OPFmsg}, {register, ONFmsg}} ->
			       {register,
				merge_msg_Register(OPFmsg, ONFmsg, TrUserData)};
			   {{response, OPFmsg}, {response, ONFmsg}} ->
			       {response,
				merge_msg_Response(OPFmsg, ONFmsg, TrUserData)};
			   {{createGroup, OPFmsg}, {createGroup, ONFmsg}} ->
			       {createGroup,
				merge_msg_CreateGroup(OPFmsg, ONFmsg,
						      TrUserData)};
			   {{joinGroup, OPFmsg}, {joinGroup, ONFmsg}} ->
			       {joinGroup,
				merge_msg_JoinGroup(OPFmsg, ONFmsg,
						    TrUserData)};
			   {{torrentWrapper, OPFmsg},
			    {torrentWrapper, ONFmsg}} ->
			       {torrentWrapper,
				merge_msg_TorrentWrapper(OPFmsg, ONFmsg,
							 TrUserData)};
			   {_, undefined} -> PFmsg;
			   _ -> NFmsg
			 end}.

merge_msg_OnlineUsers(#'OnlineUsers'{onlineUsers =
					 PFonlineUsers},
		      #'OnlineUsers'{onlineUsers = NFonlineUsers}, _) ->
    #'OnlineUsers'{onlineUsers =
		       if NFonlineUsers =:= undefined -> PFonlineUsers;
			  true -> NFonlineUsers
		       end}.


verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'GroupUsers'{} ->
	  v_msg_GroupUsers(Msg, ['GroupUsers'], TrUserData);
      #'JoinGroup'{} ->
	  v_msg_JoinGroup(Msg, ['JoinGroup'], TrUserData);
      #'Register'{} ->
	  v_msg_Register(Msg, ['Register'], TrUserData);
      #'TorrentWrapper'{} ->
	  v_msg_TorrentWrapper(Msg, ['TorrentWrapper'],
			       TrUserData);
      #'CreateGroup'{} ->
	  v_msg_CreateGroup(Msg, ['CreateGroup'], TrUserData);
      #'Response'{} ->
	  v_msg_Response(Msg, ['Response'], TrUserData);
      #'Login'{} -> v_msg_Login(Msg, ['Login'], TrUserData);
      #'ClientMessage'{} ->
	  v_msg_ClientMessage(Msg, ['ClientMessage'], TrUserData);
      #'OnlineUsers'{} ->
	  v_msg_OnlineUsers(Msg, ['OnlineUsers'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_GroupUsers/3}).
v_msg_GroupUsers(#'GroupUsers'{groupUsers = F1}, Path,
		 _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [groupUsers | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_JoinGroup/3}).
v_msg_JoinGroup(#'JoinGroup'{group = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [group | Path])
    end,
    ok;
v_msg_JoinGroup(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'JoinGroup'}, X, Path).

-dialyzer({nowarn_function,v_msg_Register/3}).
v_msg_Register(#'Register'{username = F1, password = F2,
			   name = F3},
	       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [username | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [password | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [name | Path])
    end,
    ok;
v_msg_Register(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Register'}, X, Path).

-dialyzer({nowarn_function,v_msg_TorrentWrapper/3}).
v_msg_TorrentWrapper(#'TorrentWrapper'{group = F1,
				       content = F2, id = F3},
		     Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [group | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [content | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [id | Path])
    end,
    ok;
v_msg_TorrentWrapper(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TorrentWrapper'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_CreateGroup/3}).
v_msg_CreateGroup(#'CreateGroup'{group = F1}, Path,
		  _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [group | Path])
    end,
    ok;
v_msg_CreateGroup(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CreateGroup'}, X, Path).

-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#'Response'{rep = F1}, Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [rep | Path])
    end,
    ok;
v_msg_Response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Response'}, X, Path).

-dialyzer({nowarn_function,v_msg_Login/3}).
v_msg_Login(#'Login'{username = F1, password = F2},
	    Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [username | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [password | Path])
    end,
    ok;
v_msg_Login(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Login'}, X, Path).

-dialyzer({nowarn_function,v_msg_ClientMessage/3}).
v_msg_ClientMessage(#'ClientMessage'{msg = F1}, Path,
		    TrUserData) ->
    case F1 of
      undefined -> ok;
      {login, OF1} ->
	  v_msg_Login(OF1, [login, msg | Path], TrUserData);
      {register, OF1} ->
	  v_msg_Register(OF1, [register, msg | Path], TrUserData);
      {response, OF1} ->
	  v_msg_Response(OF1, [response, msg | Path], TrUserData);
      {createGroup, OF1} ->
	  v_msg_CreateGroup(OF1, [createGroup, msg | Path],
			    TrUserData);
      {joinGroup, OF1} ->
	  v_msg_JoinGroup(OF1, [joinGroup, msg | Path],
			  TrUserData);
      {torrentWrapper, OF1} ->
	  v_msg_TorrentWrapper(OF1, [torrentWrapper, msg | Path],
			       TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [msg | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_OnlineUsers/3}).
v_msg_OnlineUsers(#'OnlineUsers'{onlineUsers = F1},
		  Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [onlineUsers | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(B, _Path) when is_list(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.


get_msg_defs() ->
    [{{msg, 'GroupUsers'},
      [#field{name = groupUsers, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'JoinGroup'},
      [#field{name = group, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Register'},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'TorrentWrapper'},
      [#field{name = group, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = content, fnum = 2, rnum = 3, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = id, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'CreateGroup'},
      [#field{name = group, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Response'},
      [#field{name = rep, fnum = 1, rnum = 2, type = bool,
	      occurrence = optional, opts = []}]},
     {{msg, 'Login'},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ClientMessage'},
      [#gpb_oneof{name = msg, rnum = 2,
		  fields =
		      [#field{name = login, fnum = 1, rnum = 2,
			      type = {msg, 'Login'}, occurrence = optional,
			      opts = []},
		       #field{name = register, fnum = 2, rnum = 2,
			      type = {msg, 'Register'}, occurrence = optional,
			      opts = []},
		       #field{name = response, fnum = 3, rnum = 2,
			      type = {msg, 'Response'}, occurrence = optional,
			      opts = []},
		       #field{name = createGroup, fnum = 4, rnum = 2,
			      type = {msg, 'CreateGroup'},
			      occurrence = optional, opts = []},
		       #field{name = joinGroup, fnum = 5, rnum = 2,
			      type = {msg, 'JoinGroup'}, occurrence = optional,
			      opts = []},
		       #field{name = torrentWrapper, fnum = 6, rnum = 2,
			      type = {msg, 'TorrentWrapper'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'OnlineUsers'},
      [#field{name = onlineUsers, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['GroupUsers', 'JoinGroup', 'Register',
     'TorrentWrapper', 'CreateGroup', 'Response', 'Login',
     'ClientMessage', 'OnlineUsers'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['GroupUsers', 'JoinGroup', 'Register',
     'TorrentWrapper', 'CreateGroup', 'Response', 'Login',
     'ClientMessage', 'OnlineUsers'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('GroupUsers') ->
    [#field{name = groupUsers, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('JoinGroup') ->
    [#field{name = group, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Register') ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('TorrentWrapper') ->
    [#field{name = group, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = content, fnum = 2, rnum = 3, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = id, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('CreateGroup') ->
    [#field{name = group, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Response') ->
    [#field{name = rep, fnum = 1, rnum = 2, type = bool,
	    occurrence = optional, opts = []}];
find_msg_def('Login') ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ClientMessage') ->
    [#gpb_oneof{name = msg, rnum = 2,
		fields =
		    [#field{name = login, fnum = 1, rnum = 2,
			    type = {msg, 'Login'}, occurrence = optional,
			    opts = []},
		     #field{name = register, fnum = 2, rnum = 2,
			    type = {msg, 'Register'}, occurrence = optional,
			    opts = []},
		     #field{name = response, fnum = 3, rnum = 2,
			    type = {msg, 'Response'}, occurrence = optional,
			    opts = []},
		     #field{name = createGroup, fnum = 4, rnum = 2,
			    type = {msg, 'CreateGroup'}, occurrence = optional,
			    opts = []},
		     #field{name = joinGroup, fnum = 5, rnum = 2,
			    type = {msg, 'JoinGroup'}, occurrence = optional,
			    opts = []},
		     #field{name = torrentWrapper, fnum = 6, rnum = 2,
			    type = {msg, 'TorrentWrapper'},
			    occurrence = optional, opts = []}]}];
find_msg_def('OnlineUsers') ->
    [#field{name = onlineUsers, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> client_network.



gpb_version_as_string() ->
    "4.1.1".

gpb_version_as_list() ->
    [4,1,1].
